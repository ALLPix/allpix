//
// File generated by rootcint at Mon Apr  7 14:35:20 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME SelDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "SelDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void SimpleHits_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SimpleHits(void *p = 0);
   static void *newArray_SimpleHits(Long_t size, void *p);
   static void delete_SimpleHits(void *p);
   static void deleteArray_SimpleHits(void *p);
   static void destruct_SimpleHits(void *p);
   static void streamer_SimpleHits(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SimpleHits*)
   {
      ::SimpleHits *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SimpleHits >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SimpleHits", ::SimpleHits::Class_Version(), "./include/AllPix_Hits_WriteToEntuple.h", 33,
                  typeid(::SimpleHits), DefineBehavior(ptr, ptr),
                  &::SimpleHits::Dictionary, isa_proxy, 0,
                  sizeof(::SimpleHits) );
      instance.SetNew(&new_SimpleHits);
      instance.SetNewArray(&newArray_SimpleHits);
      instance.SetDelete(&delete_SimpleHits);
      instance.SetDeleteArray(&deleteArray_SimpleHits);
      instance.SetDestructor(&destruct_SimpleHits);
      instance.SetStreamerFunc(&streamer_SimpleHits);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SimpleHits*)
   {
      return GenerateInitInstanceLocal((::SimpleHits*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SimpleHits*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FrameStruct_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_FrameStruct(void *p);
   static void deleteArray_FrameStruct(void *p);
   static void destruct_FrameStruct(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FrameStruct*)
   {
      ::FrameStruct *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FrameStruct >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FrameStruct", ::FrameStruct::Class_Version(), "./include/allpix_dm.h", 76,
                  typeid(::FrameStruct), DefineBehavior(ptr, ptr),
                  &::FrameStruct::Dictionary, isa_proxy, 4,
                  sizeof(::FrameStruct) );
      instance.SetDelete(&delete_FrameStruct);
      instance.SetDeleteArray(&deleteArray_FrameStruct);
      instance.SetDestructor(&destruct_FrameStruct);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FrameStruct*)
   {
      return GenerateInitInstanceLocal((::FrameStruct*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FrameStruct*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void WriteToNtuple_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_WriteToNtuple(void *p);
   static void deleteArray_WriteToNtuple(void *p);
   static void destruct_WriteToNtuple(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::WriteToNtuple*)
   {
      ::WriteToNtuple *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::WriteToNtuple >(0);
      static ::ROOT::TGenericClassInfo 
         instance("WriteToNtuple", ::WriteToNtuple::Class_Version(), "./include/AllPix_Frames_WriteToEntuple.h", 33,
                  typeid(::WriteToNtuple), DefineBehavior(ptr, ptr),
                  &::WriteToNtuple::Dictionary, isa_proxy, 4,
                  sizeof(::WriteToNtuple) );
      instance.SetDelete(&delete_WriteToNtuple);
      instance.SetDeleteArray(&deleteArray_WriteToNtuple);
      instance.SetDestructor(&destruct_WriteToNtuple);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::WriteToNtuple*)
   {
      return GenerateInitInstanceLocal((::WriteToNtuple*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::WriteToNtuple*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FrameContainer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FrameContainer(void *p = 0);
   static void *newArray_FrameContainer(Long_t size, void *p);
   static void delete_FrameContainer(void *p);
   static void deleteArray_FrameContainer(void *p);
   static void destruct_FrameContainer(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FrameContainer*)
   {
      ::FrameContainer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FrameContainer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FrameContainer", ::FrameContainer::Class_Version(), "./include/allpix_dm.h", 25,
                  typeid(::FrameContainer), DefineBehavior(ptr, ptr),
                  &::FrameContainer::Dictionary, isa_proxy, 4,
                  sizeof(::FrameContainer) );
      instance.SetNew(&new_FrameContainer);
      instance.SetNewArray(&newArray_FrameContainer);
      instance.SetDelete(&delete_FrameContainer);
      instance.SetDeleteArray(&deleteArray_FrameContainer);
      instance.SetDestructor(&destruct_FrameContainer);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FrameContainer*)
   {
      return GenerateInitInstanceLocal((::FrameContainer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FrameContainer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void AllPixDigitAnimation_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AllPixDigitAnimation(void *p);
   static void deleteArray_AllPixDigitAnimation(void *p);
   static void destruct_AllPixDigitAnimation(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::AllPixDigitAnimation*)
   {
      ::AllPixDigitAnimation *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AllPixDigitAnimation >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AllPixDigitAnimation", ::AllPixDigitAnimation::Class_Version(), "./include/AllPixDigitAnimation.hh", 29,
                  typeid(::AllPixDigitAnimation), DefineBehavior(ptr, ptr),
                  &::AllPixDigitAnimation::Dictionary, isa_proxy, 4,
                  sizeof(::AllPixDigitAnimation) );
      instance.SetDelete(&delete_AllPixDigitAnimation);
      instance.SetDeleteArray(&deleteArray_AllPixDigitAnimation);
      instance.SetDestructor(&destruct_AllPixDigitAnimation);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::AllPixDigitAnimation*)
   {
      return GenerateInitInstanceLocal((::AllPixDigitAnimation*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AllPixDigitAnimation*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *SimpleHits::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SimpleHits::Class_Name()
{
   return "SimpleHits";
}

//______________________________________________________________________________
const char *SimpleHits::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SimpleHits*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SimpleHits::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SimpleHits*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SimpleHits::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SimpleHits*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SimpleHits::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SimpleHits*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FrameStruct::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FrameStruct::Class_Name()
{
   return "FrameStruct";
}

//______________________________________________________________________________
const char *FrameStruct::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FrameStruct*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FrameStruct::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FrameStruct*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FrameStruct::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FrameStruct*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FrameStruct::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FrameStruct*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *WriteToNtuple::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *WriteToNtuple::Class_Name()
{
   return "WriteToNtuple";
}

//______________________________________________________________________________
const char *WriteToNtuple::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::WriteToNtuple*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int WriteToNtuple::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::WriteToNtuple*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void WriteToNtuple::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::WriteToNtuple*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *WriteToNtuple::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::WriteToNtuple*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FrameContainer::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FrameContainer::Class_Name()
{
   return "FrameContainer";
}

//______________________________________________________________________________
const char *FrameContainer::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FrameContainer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FrameContainer::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FrameContainer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FrameContainer::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FrameContainer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FrameContainer::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FrameContainer*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *AllPixDigitAnimation::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *AllPixDigitAnimation::Class_Name()
{
   return "AllPixDigitAnimation";
}

//______________________________________________________________________________
const char *AllPixDigitAnimation::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::AllPixDigitAnimation*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AllPixDigitAnimation::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::AllPixDigitAnimation*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AllPixDigitAnimation::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::AllPixDigitAnimation*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AllPixDigitAnimation::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::AllPixDigitAnimation*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void FrameStruct::Streamer(TBuffer &R__b)
{
   // Stream an object of class FrameStruct.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FrameStruct::Class(),this);
   } else {
      R__b.WriteClassBuffer(FrameStruct::Class(),this);
   }
}

//______________________________________________________________________________
void FrameStruct::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FrameStruct.
      TClass *R__cl = ::FrameStruct::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFormat", &fFormat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWidth", &fWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHeight", &fHeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAcq_mode", &fAcq_mode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAcq_time", &fAcq_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fApplied_filters", &fApplied_filters);
      R__insp.InspectMember(fApplied_filters, "fApplied_filters.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAuto_erase_interval", &fAuto_erase_interval);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAutoerase_interval_counter", &fAutoerase_interval_counter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBS_active", &fBS_active);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChipboardID", &fChipboardID);
      R__insp.InspectMember(fChipboardID, "fChipboardID.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCoinc_live_time", &fCoinc_live_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCoincidence_delay", &fCoincidence_delay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCoincidence_mode", &fCoincidence_mode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCounters", (void*)&fCounters);
      R__insp.InspectMember("vector<Int_t>", (void*)&fCounters, "fCounters.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDACs", (void*)&fDACs);
      R__insp.InspectMember("vector<Int_t>", (void*)&fDACs, "fDACs.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHV", &fHV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHw_timer", &fHw_timer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInterface", &fInterface);
      R__insp.InspectMember(fInterface, "fInterface.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMpx_clock", &fMpx_clock);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMpx_type", &fMpx_type);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPolarity", &fPolarity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStart_time", &fStart_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStart_timeS", &fStart_timeS);
      R__insp.InspectMember(fStart_timeS, "fStart_timeS.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimepix_clock", &fTimepix_clock);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrigger_time", &fTrigger_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_primaryVertex_x", (void*)&m_primaryVertex_x);
      R__insp.InspectMember("vector<Double_t>", (void*)&m_primaryVertex_x, "m_primaryVertex_x.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_primaryVertex_y", (void*)&m_primaryVertex_y);
      R__insp.InspectMember("vector<Double_t>", (void*)&m_primaryVertex_y, "m_primaryVertex_y.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_primaryVertex_z", (void*)&m_primaryVertex_z);
      R__insp.InspectMember("vector<Double_t>", (void*)&m_primaryVertex_z, "m_primaryVertex_z.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFrameId", &fFrameId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMPXDataSetNumber", &fMPXDataSetNumber);
      R__insp.InspectMember(fMPXDataSetNumber, "fMPXDataSetNumber.");
      FrameContainer::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_FrameStruct(void *p) {
      delete ((::FrameStruct*)p);
   }
   static void deleteArray_FrameStruct(void *p) {
      delete [] ((::FrameStruct*)p);
   }
   static void destruct_FrameStruct(void *p) {
      typedef ::FrameStruct current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::FrameStruct

//______________________________________________________________________________
void FrameContainer::Streamer(TBuffer &R__b)
{
   // Stream an object of class FrameContainer.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FrameContainer::Class(),this);
   } else {
      R__b.WriteClassBuffer(FrameContainer::Class(),this);
   }
}

//______________________________________________________________________________
void FrameContainer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FrameContainer.
      TClass *R__cl = ::FrameContainer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_frameXC", (void*)&m_frameXC);
      R__insp.InspectMember("map<int,int>", (void*)&m_frameXC, "m_frameXC.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_lvl1", (void*)&m_lvl1);
      R__insp.InspectMember("map<int,int>", (void*)&m_lvl1, "m_lvl1.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_frameXC_TruthE", (void*)&m_frameXC_TruthE);
      R__insp.InspectMember("map<int,int>", (void*)&m_frameXC_TruthE, "m_frameXC_TruthE.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_frameXC_E", (void*)&m_frameXC_E);
      R__insp.InspectMember("map<int,int>", (void*)&m_frameXC_E, "m_frameXC_E.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nEntriesPad", &m_nEntriesPad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nHitsInPad", &m_nHitsInPad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nChargeInPad", &m_nChargeInPad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_isMCData", &m_isMCData);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FrameContainer(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FrameContainer : new ::FrameContainer;
   }
   static void *newArray_FrameContainer(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::FrameContainer[nElements] : new ::FrameContainer[nElements];
   }
   // Wrapper around operator delete
   static void delete_FrameContainer(void *p) {
      delete ((::FrameContainer*)p);
   }
   static void deleteArray_FrameContainer(void *p) {
      delete [] ((::FrameContainer*)p);
   }
   static void destruct_FrameContainer(void *p) {
      typedef ::FrameContainer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::FrameContainer

//______________________________________________________________________________
void WriteToNtuple::Streamer(TBuffer &R__b)
{
   // Stream an object of class WriteToNtuple.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(WriteToNtuple::Class(),this);
   } else {
      R__b.WriteClassBuffer(WriteToNtuple::Class(),this);
   }
}

//______________________________________________________________________________
void WriteToNtuple::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class WriteToNtuple.
      TClass *R__cl = ::WriteToNtuple::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_frame", &m_frame);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*h1", &h1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*nt", &nt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*t2", &t2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b2", &b2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_MPXDataSetNumber", &m_MPXDataSetNumber);
      R__insp.InspectMember(m_MPXDataSetNumber, "m_MPXDataSetNumber.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_ntupleFileName", &m_ntupleFileName);
      R__insp.InspectMember(m_ntupleFileName, "m_ntupleFileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_detID", &m_detID);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_WriteToNtuple(void *p) {
      delete ((::WriteToNtuple*)p);
   }
   static void deleteArray_WriteToNtuple(void *p) {
      delete [] ((::WriteToNtuple*)p);
   }
   static void destruct_WriteToNtuple(void *p) {
      typedef ::WriteToNtuple current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::WriteToNtuple

//______________________________________________________________________________
void SimpleHits::Streamer(TBuffer &R__b)
{
   // Stream an object of class SimpleHits.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b >> edepTotal;
      {
         vector<string> &R__stl =  interactions;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            string R__t;
            {TString R__str;
             R__str.Streamer(R__b);
             R__t = R__str.Data();}
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TVector3> &R__stl =  pos;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TVector3 R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<int> &R__stl =  pdgId;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  edep;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<int> &R__stl =  trackId;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<int> &R__stl =  parentId;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<string> &R__stl =  trackVolumeName;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            string R__t;
            {TString R__str;
             R__str.Streamer(R__b);
             R__t = R__str.Data();}
            R__stl.push_back(R__t);
         }
      }
      {
         vector<string> &R__stl =  parentVolumeName;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            string R__t;
            {TString R__str;
             R__str.Streamer(R__b);
             R__t = R__str.Data();}
            R__stl.push_back(R__t);
         }
      }
      R__b >> event;
      R__b >> run;
      R__b.CheckByteCount(R__s, R__c, SimpleHits::IsA());
   } else {
      R__c = R__b.WriteVersion(SimpleHits::IsA(), kTRUE);
      R__b << edepTotal;
      {
         vector<string> &R__stl =  interactions;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<string>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            {TString R__str((*R__k).c_str());
             R__str.Streamer(R__b);};
            }
         }
      }
      {
         vector<TVector3> &R__stl =  pos;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TVector3>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TVector3&)(*R__k)).Streamer(R__b);
            }
         }
      }
      {
         vector<int> &R__stl =  pdgId;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  edep;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<int> &R__stl =  trackId;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<int> &R__stl =  parentId;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<string> &R__stl =  trackVolumeName;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<string>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            {TString R__str((*R__k).c_str());
             R__str.Streamer(R__b);};
            }
         }
      }
      {
         vector<string> &R__stl =  parentVolumeName;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<string>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            {TString R__str((*R__k).c_str());
             R__str.Streamer(R__b);};
            }
         }
      }
      R__b << event;
      R__b << run;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void SimpleHits::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SimpleHits.
      TClass *R__cl = ::SimpleHits::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "edepTotal", &edepTotal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "interactions", (void*)&interactions);
      R__insp.InspectMember("vector<string>", (void*)&interactions, "interactions.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pos", (void*)&pos);
      R__insp.InspectMember("vector<TVector3>", (void*)&pos, "pos.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdgId", (void*)&pdgId);
      R__insp.InspectMember("vector<int>", (void*)&pdgId, "pdgId.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "edep", (void*)&edep);
      R__insp.InspectMember("vector<float>", (void*)&edep, "edep.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackId", (void*)&trackId);
      R__insp.InspectMember("vector<int>", (void*)&trackId, "trackId.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parentId", (void*)&parentId);
      R__insp.InspectMember("vector<int>", (void*)&parentId, "parentId.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackVolumeName", (void*)&trackVolumeName);
      R__insp.InspectMember("vector<string>", (void*)&trackVolumeName, "trackVolumeName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parentVolumeName", (void*)&parentVolumeName);
      R__insp.InspectMember("vector<string>", (void*)&parentVolumeName, "parentVolumeName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "event", &event);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "run", &run);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SimpleHits(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SimpleHits : new ::SimpleHits;
   }
   static void *newArray_SimpleHits(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SimpleHits[nElements] : new ::SimpleHits[nElements];
   }
   // Wrapper around operator delete
   static void delete_SimpleHits(void *p) {
      delete ((::SimpleHits*)p);
   }
   static void deleteArray_SimpleHits(void *p) {
      delete [] ((::SimpleHits*)p);
   }
   static void destruct_SimpleHits(void *p) {
      typedef ::SimpleHits current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_SimpleHits(TBuffer &buf, void *obj) {
      ((::SimpleHits*)obj)->::SimpleHits::Streamer(buf);
   }
} // end of namespace ROOT for class ::SimpleHits

//______________________________________________________________________________
void AllPixDigitAnimation::Streamer(TBuffer &R__b)
{
   // Stream an object of class AllPixDigitAnimation.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AllPixDigitAnimation::Class(),this);
   } else {
      R__b.WriteClassBuffer(AllPixDigitAnimation::Class(),this);
   }
}

//______________________________________________________________________________
void AllPixDigitAnimation::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AllPixDigitAnimation.
      TClass *R__cl = ::AllPixDigitAnimation::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Geo", &Geo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*f", &f);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Ntracks", &Ntracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*medium", &medium);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*top", &top);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*PixBox", &PixBox);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*PixVolume", &PixVolume);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackid", &trackid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nx", &nx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ny", &ny);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Lz", &Lz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shiftx", &shiftx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shifty", &shifty);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pitchx", &pitchx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pitchy", &pitchy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MyPalette[100]", MyPalette);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "emax", &emax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z_hit", &z_hit);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_AllPixDigitAnimation(void *p) {
      delete ((::AllPixDigitAnimation*)p);
   }
   static void deleteArray_AllPixDigitAnimation(void *p) {
      delete [] ((::AllPixDigitAnimation*)p);
   }
   static void destruct_AllPixDigitAnimation(void *p) {
      typedef ::AllPixDigitAnimation current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::AllPixDigitAnimation

namespace ROOT {
   void maplEintcOintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEintcOintgR_Dictionary();
   static void *new_maplEintcOintgR(void *p = 0);
   static void *newArray_maplEintcOintgR(Long_t size, void *p);
   static void delete_maplEintcOintgR(void *p);
   static void deleteArray_maplEintcOintgR(void *p);
   static void destruct_maplEintcOintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<int,int>*)
   {
      map<int,int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<int,int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<int,int>", -2, "map2.dll", 0,
                  typeid(map<int,int>), DefineBehavior(ptr, ptr),
                  0, &maplEintcOintgR_Dictionary, isa_proxy, 0,
                  sizeof(map<int,int>) );
      instance.SetNew(&new_maplEintcOintgR);
      instance.SetNewArray(&newArray_maplEintcOintgR);
      instance.SetDelete(&delete_maplEintcOintgR);
      instance.SetDeleteArray(&deleteArray_maplEintcOintgR);
      instance.SetDestructor(&destruct_maplEintcOintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<int,int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<int,int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEintcOintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<int,int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEintcOintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,int> : new map<int,int>;
   }
   static void *newArray_maplEintcOintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,int>[nElements] : new map<int,int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEintcOintgR(void *p) {
      delete ((map<int,int>*)p);
   }
   static void deleteArray_maplEintcOintgR(void *p) {
      delete [] ((map<int,int>*)p);
   }
   static void destruct_maplEintcOintgR(void *p) {
      typedef map<int,int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<int,int>

namespace ROOT {
   void vectorlETVector3gR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETVector3gR_Dictionary();
   static void *new_vectorlETVector3gR(void *p = 0);
   static void *newArray_vectorlETVector3gR(Long_t size, void *p);
   static void delete_vectorlETVector3gR(void *p);
   static void deleteArray_vectorlETVector3gR(void *p);
   static void destruct_vectorlETVector3gR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TVector3>*)
   {
      vector<TVector3> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TVector3>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TVector3>", -2, "/afs/cern.ch/sw/lcg/app/releases/ROOT/5.34.00/x86_64-slc5-gcc43-opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<TVector3>), DefineBehavior(ptr, ptr),
                  0, &vectorlETVector3gR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TVector3>) );
      instance.SetNew(&new_vectorlETVector3gR);
      instance.SetNewArray(&newArray_vectorlETVector3gR);
      instance.SetDelete(&delete_vectorlETVector3gR);
      instance.SetDeleteArray(&deleteArray_vectorlETVector3gR);
      instance.SetDestructor(&destruct_vectorlETVector3gR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TVector3> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TVector3>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETVector3gR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TVector3>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETVector3gR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TVector3> : new vector<TVector3>;
   }
   static void *newArray_vectorlETVector3gR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TVector3>[nElements] : new vector<TVector3>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETVector3gR(void *p) {
      delete ((vector<TVector3>*)p);
   }
   static void deleteArray_vectorlETVector3gR(void *p) {
      delete [] ((vector<TVector3>*)p);
   }
   static void destruct_vectorlETVector3gR(void *p) {
      typedef vector<TVector3> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TVector3>

namespace ROOT {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<double>

namespace ROOT {
   void vectorlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEfloatgR_Dictionary();
   static void *new_vectorlEfloatgR(void *p = 0);
   static void *newArray_vectorlEfloatgR(Long_t size, void *p);
   static void delete_vectorlEfloatgR(void *p);
   static void deleteArray_vectorlEfloatgR(void *p);
   static void destruct_vectorlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<float>*)
   {
      vector<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<float>", -2, "vector.dll", 0,
                  typeid(vector<float>), DefineBehavior(ptr, ptr),
                  0, &vectorlEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<float>) );
      instance.SetNew(&new_vectorlEfloatgR);
      instance.SetNewArray(&newArray_vectorlEfloatgR);
      instance.SetDelete(&delete_vectorlEfloatgR);
      instance.SetDeleteArray(&deleteArray_vectorlEfloatgR);
      instance.SetDestructor(&destruct_vectorlEfloatgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float> : new vector<float>;
   }
   static void *newArray_vectorlEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float>[nElements] : new vector<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEfloatgR(void *p) {
      delete ((vector<float>*)p);
   }
   static void deleteArray_vectorlEfloatgR(void *p) {
      delete [] ((vector<float>*)p);
   }
   static void destruct_vectorlEfloatgR(void *p) {
      typedef vector<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<float>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "/afs/cern.ch/sw/lcg/app/releases/ROOT/5.34.00/x86_64-slc5-gcc43-opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

namespace ROOT {
   void vectorlEstringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEstringgR_Dictionary();
   static void *new_vectorlEstringgR(void *p = 0);
   static void *newArray_vectorlEstringgR(Long_t size, void *p);
   static void delete_vectorlEstringgR(void *p);
   static void deleteArray_vectorlEstringgR(void *p);
   static void destruct_vectorlEstringgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<string>*)
   {
      vector<string> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<string>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<string>", -2, "/afs/cern.ch/sw/lcg/app/releases/ROOT/5.34.00/x86_64-slc5-gcc43-opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<string>), DefineBehavior(ptr, ptr),
                  0, &vectorlEstringgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<string>) );
      instance.SetNew(&new_vectorlEstringgR);
      instance.SetNewArray(&newArray_vectorlEstringgR);
      instance.SetDelete(&delete_vectorlEstringgR);
      instance.SetDeleteArray(&deleteArray_vectorlEstringgR);
      instance.SetDestructor(&destruct_vectorlEstringgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<string> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<string>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEstringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<string>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEstringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string> : new vector<string>;
   }
   static void *newArray_vectorlEstringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string>[nElements] : new vector<string>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEstringgR(void *p) {
      delete ((vector<string>*)p);
   }
   static void deleteArray_vectorlEstringgR(void *p) {
      delete [] ((vector<string>*)p);
   }
   static void destruct_vectorlEstringgR(void *p) {
      typedef vector<string> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<string>

/********************************************************
* SelDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableSelDict();

extern "C" void G__set_cpp_environmentSelDict() {
  G__cpp_reset_tagtableSelDict();
}
#include <new>
extern "C" int G__cpp_dllrevSelDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* SimpleHits */
static int G__SelDict_651_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SimpleHits* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SimpleHits[n];
     } else {
       p = new((void*) gvp) SimpleHits[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SimpleHits;
     } else {
       p = new((void*) gvp) SimpleHits;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SelDictLN_SimpleHits));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_651_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SimpleHits*) G__getstructoffset())->Rewind();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_651_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SimpleHits::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_651_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SimpleHits::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_651_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SimpleHits::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_651_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SimpleHits::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_651_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SimpleHits*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_651_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SimpleHits*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_651_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SimpleHits*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_651_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SimpleHits*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_651_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SimpleHits::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_651_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SimpleHits::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_651_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SimpleHits::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_651_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SimpleHits::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SelDict_651_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SimpleHits* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SimpleHits(*(SimpleHits*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SelDictLN_SimpleHits));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SimpleHits G__TSimpleHits;
static int G__SelDict_651_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SimpleHits*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SimpleHits*) (soff+(sizeof(SimpleHits)*i)))->~G__TSimpleHits();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SimpleHits*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SimpleHits*) (soff))->~G__TSimpleHits();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SelDict_651_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SimpleHits* dest = (SimpleHits*) G__getstructoffset();
   *dest = *(SimpleHits*) libp->para[0].ref;
   const SimpleHits& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FrameStruct */
static int G__SelDict_666_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FrameStruct* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FrameStruct(*((TString*) G__int(libp->para[0])));
   } else {
     p = new((void*) gvp) FrameStruct(*((TString*) G__int(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SelDictLN_FrameStruct));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_666_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FrameStruct*) G__getstructoffset())->FillMetaData(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_666_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FrameStruct*) G__getstructoffset())->IncreaseId();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_666_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FrameStruct*) G__getstructoffset())->SetId((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_666_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FrameStruct*) G__getstructoffset())->SetPrimaryVertex((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_666_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((FrameStruct*) G__getstructoffset())->GetDataSet();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_666_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FrameStruct*) G__getstructoffset())->GetFrameId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_666_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FrameStruct*) G__getstructoffset())->RewindMetaDataValues();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_666_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FrameStruct*) G__getstructoffset())->SetnX((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_666_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FrameStruct*) G__getstructoffset())->SetnY((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_666_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FrameStruct::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_666_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FrameStruct::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_666_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FrameStruct::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_666_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FrameStruct::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_666_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FrameStruct*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_666_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FrameStruct::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_666_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FrameStruct::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_666_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FrameStruct::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_666_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FrameStruct::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SelDict_666_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FrameStruct* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FrameStruct(*(FrameStruct*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SelDictLN_FrameStruct));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FrameStruct G__TFrameStruct;
static int G__SelDict_666_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FrameStruct*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FrameStruct*) (soff+(sizeof(FrameStruct)*i)))->~G__TFrameStruct();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FrameStruct*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FrameStruct*) (soff))->~G__TFrameStruct();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SelDict_666_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FrameStruct* dest = (FrameStruct*) G__getstructoffset();
   *dest = *(FrameStruct*) libp->para[0].ref;
   const FrameStruct& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* WriteToNtuple */
static int G__SelDict_667_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WriteToNtuple* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WriteToNtuple(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, *((TString*) G__int(libp->para[4])));
     } else {
       p = new((void*) gvp) WriteToNtuple(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, *((TString*) G__int(libp->para[4])));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WriteToNtuple(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) WriteToNtuple(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SelDictLN_WriteToNtuple));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_667_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WriteToNtuple*) G__getstructoffset())->fillVars((FramesHandler*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_667_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WriteToNtuple*) G__getstructoffset())->closeNtuple();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_667_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((WriteToNtuple*) G__getstructoffset())->GetNtupleFileName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_667_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 85, (long) WriteToNtuple::GetInstance(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), *((TString*) G__int(libp->para[5]))));
      break;
   case 5:
      G__letint(result7, 85, (long) WriteToNtuple::GetInstance(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_667_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((WriteToNtuple*) G__getstructoffset())->GetTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_667_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((WriteToNtuple*) G__getstructoffset())->GetDetectorId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_667_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) WriteToNtuple::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_667_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WriteToNtuple::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_667_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) WriteToNtuple::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_667_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      WriteToNtuple::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_667_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const WriteToNtuple*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_667_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WriteToNtuple*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_667_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WriteToNtuple*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_667_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WriteToNtuple*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_667_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WriteToNtuple::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_667_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) WriteToNtuple::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_667_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WriteToNtuple::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_667_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) WriteToNtuple::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SelDict_667_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   WriteToNtuple* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new WriteToNtuple(*(WriteToNtuple*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SelDictLN_WriteToNtuple));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef WriteToNtuple G__TWriteToNtuple;
static int G__SelDict_667_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (WriteToNtuple*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((WriteToNtuple*) (soff+(sizeof(WriteToNtuple)*i)))->~G__TWriteToNtuple();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (WriteToNtuple*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((WriteToNtuple*) (soff))->~G__TWriteToNtuple();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SelDict_667_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WriteToNtuple* dest = (WriteToNtuple*) G__getstructoffset();
   *dest = *(WriteToNtuple*) libp->para[0].ref;
   const WriteToNtuple& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FrameContainer */
static int G__SelDict_668_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FrameContainer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FrameContainer[n];
     } else {
       p = new((void*) gvp) FrameContainer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FrameContainer;
     } else {
       p = new((void*) gvp) FrameContainer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SelDictLN_FrameContainer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_668_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FrameContainer*) G__getstructoffset())->FillOneElement((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_668_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FrameContainer*) G__getstructoffset())->FillOneElement((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_668_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FrameContainer*) G__getstructoffset())->SetLVL1((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_668_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FrameContainer*) G__getstructoffset())->ResetCountersPad();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_668_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FrameContainer*) G__getstructoffset())->CleanUpMatrix();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_668_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FrameContainer*) G__getstructoffset())->SetFrameAsMCData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_668_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FrameContainer*) G__getstructoffset())->GetEntriesPad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_668_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FrameContainer*) G__getstructoffset())->GetHitsInPad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_668_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((FrameContainer*) G__getstructoffset())->GetChargeInPad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_668_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FrameContainer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_668_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FrameContainer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_668_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FrameContainer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_668_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FrameContainer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_668_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const FrameContainer*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_668_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FrameContainer*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_668_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FrameContainer*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_668_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FrameContainer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_668_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FrameContainer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_668_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FrameContainer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_668_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FrameContainer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_668_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FrameContainer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SelDict_668_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FrameContainer* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FrameContainer(*(FrameContainer*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SelDictLN_FrameContainer));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FrameContainer G__TFrameContainer;
static int G__SelDict_668_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FrameContainer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FrameContainer*) (soff+(sizeof(FrameContainer)*i)))->~G__TFrameContainer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FrameContainer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FrameContainer*) (soff))->~G__TFrameContainer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SelDict_668_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FrameContainer* dest = (FrameContainer*) G__getstructoffset();
   *dest = *(FrameContainer*) libp->para[0].ref;
   const FrameContainer& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AllPixDigitAnimation */
static int G__SelDict_764_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AllPixDigitAnimation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AllPixDigitAnimation(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]));
   } else {
     p = new((void*) gvp) AllPixDigitAnimation(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SelDictLN_AllPixDigitAnimation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_764_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AllPixDigitAnimation*) G__getstructoffset())->AddTrack(*((vector<double>*) G__int(libp->para[0])), *((vector<double>*) G__int(libp->para[1]))
, *((vector<double>*) G__int(libp->para[2])), *((vector<double>*) G__int(libp->para[3]))
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_764_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((AllPixDigitAnimation*) G__getstructoffset())->modulo((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_764_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AllPixDigitAnimation*) G__getstructoffset())->FirePixel((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_764_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AllPixDigitAnimation*) G__getstructoffset())->SubThresholdPixel((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_764_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AllPixDigitAnimation*) G__getstructoffset())->SetShift((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_764_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AllPixDigitAnimation::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_764_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AllPixDigitAnimation::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_764_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AllPixDigitAnimation::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_764_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AllPixDigitAnimation::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_764_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AllPixDigitAnimation*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_764_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AllPixDigitAnimation::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_764_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AllPixDigitAnimation::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_764_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AllPixDigitAnimation::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SelDict_764_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AllPixDigitAnimation::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SelDict_764_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AllPixDigitAnimation* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AllPixDigitAnimation(*(AllPixDigitAnimation*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SelDictLN_AllPixDigitAnimation));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AllPixDigitAnimation G__TAllPixDigitAnimation;
static int G__SelDict_764_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AllPixDigitAnimation*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AllPixDigitAnimation*) (soff+(sizeof(AllPixDigitAnimation)*i)))->~G__TAllPixDigitAnimation();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AllPixDigitAnimation*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AllPixDigitAnimation*) (soff))->~G__TAllPixDigitAnimation();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SelDict_764_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AllPixDigitAnimation* dest = (AllPixDigitAnimation*) G__getstructoffset();
   *dest = *(AllPixDigitAnimation*) libp->para[0].ref;
   const AllPixDigitAnimation& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* SimpleHits */

/* FrameStruct */

/* WriteToNtuple */

/* FrameContainer */

/* AllPixDigitAnimation */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncSelDict {
 public:
  G__Sizep2memfuncSelDict(): p(&G__Sizep2memfuncSelDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncSelDict::*p)();
};

size_t G__get_sizep2memfuncSelDict()
{
  G__Sizep2memfuncSelDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceSelDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SelDictLN_FrameStruct))) {
     FrameStruct *G__Lderived;
     G__Lderived=(FrameStruct*)0x1000;
     {
       FrameContainer *G__Lpbase=(FrameContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SelDictLN_FrameStruct),G__get_linked_tagnum(&G__SelDictLN_FrameContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SelDictLN_AllPixDigitAnimation))) {
     AllPixDigitAnimation *G__Lderived;
     G__Lderived=(AllPixDigitAnimation*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SelDictLN_AllPixDigitAnimation),G__get_linked_tagnum(&G__SelDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableSelDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__SelDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SelDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SelDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SelDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SelDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__SelDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SelDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SelDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SelDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SelDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__SelDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__SelDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__SelDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__SelDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__SelDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__SelDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__SelDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__SelDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__SelDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__SelDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__SelDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__SelDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__SelDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__SelDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__SelDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__SelDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__SelDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__SelDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__SelDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__SelDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__SelDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__SelDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__SelDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__SelDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__SelDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__SelDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__SelDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__SelDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__SelDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__SelDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__SelDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SelDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SelDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SelDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SelDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVector3>",117,G__get_linked_tagnum(&G__SelDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SelDictLN_reverse_iteratorlEvectorlETVector3cOallocatorlETVector3gRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SelDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SelDictLN_reverse_iteratorlEvectorlETVector3cOallocatorlETVector3gRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SelDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__SelDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SelDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SelDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SelDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SelDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__SelDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Double_t>",117,G__get_linked_tagnum(&G__SelDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,TGeoElementRN*>",117,G__get_linked_tagnum(&G__SelDictLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TGeoElementRN*>",117,G__get_linked_tagnum(&G__SelDictLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TGeoElementRN*,less<int> >",117,G__get_linked_tagnum(&G__SelDictLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ThreadData_t*>",117,G__get_linked_tagnum(&G__SelDictLN_vectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SelDictLN_reverse_iteratorlEvectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SelDictLN_vectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SelDictLN_reverse_iteratorlEvectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SelDictLN_vectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TGeoVolumeAssembly::ThreadData_t*>",117,G__get_linked_tagnum(&G__SelDictLN_vectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Long_t,TGeoNavigatorArray*>",117,G__get_linked_tagnum(&G__SelDictLN_maplElongcOTGeoNavigatorArraymUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOTGeoNavigatorArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<long,TGeoNavigatorArray*>",117,G__get_linked_tagnum(&G__SelDictLN_maplElongcOTGeoNavigatorArraymUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOTGeoNavigatorArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<long,TGeoNavigatorArray*,less<long> >",117,G__get_linked_tagnum(&G__SelDictLN_maplElongcOTGeoNavigatorArraymUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOTGeoNavigatorArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Long_t,Int_t>",117,G__get_linked_tagnum(&G__SelDictLN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* SimpleHits */
static void G__setup_memvarSimpleHits(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SelDictLN_SimpleHits));
   { SimpleHits *p; p=(SimpleHits*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->edepTotal)-(long)(p)),102,0,0,-1,-1,-1,1,"edepTotal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->interactions)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SelDictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,1,"interactions=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pos)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SelDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR),G__defined_typename("vector<TVector3>"),-1,1,"pos=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdgId)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SelDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"pdgId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->edep)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SelDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"edep=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackId)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SelDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"trackId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->parentId)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SelDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"parentId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackVolumeName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SelDictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,1,"trackVolumeName=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->parentVolumeName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SelDictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,1,"parentVolumeName=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->event)-(long)(p)),105,0,0,-1,-1,-1,1,"event=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->run)-(long)(p)),105,0,0,-1,-1,-1,1,"run=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SelDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FrameStruct */
static void G__setup_memvarFrameStruct(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SelDictLN_FrameStruct));
   { FrameStruct *p; p=(FrameStruct*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFormat=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fWidth=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fHeight=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAcq_mode=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fAcq_time=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SelDictLN_TString),-1,-1,4,"fApplied_filters=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fAuto_erase_interval=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAutoerase_interval_counter=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fBS_active=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SelDictLN_TString),-1,-1,4,"fChipboardID=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCoinc_live_time=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fCoincidence_delay=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fCoincidence_mode=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SelDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"fCounters=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SelDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"fDACs=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fHV=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fHw_timer=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SelDictLN_TString),-1,-1,4,"fInterface=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMpx_clock=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMpx_type=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPolarity=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fStart_time=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SelDictLN_TString),-1,-1,4,"fStart_timeS=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fTimepix_clock=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTrigger_time=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SelDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"m_primaryVertex_x=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SelDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"m_primaryVertex_y=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SelDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"m_primaryVertex_z=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("Long_t"),-1,4,"fFrameId=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SelDictLN_TString),-1,-1,4,"fMPXDataSetNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SelDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* WriteToNtuple */
static void G__setup_memvarWriteToNtuple(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SelDictLN_WriteToNtuple));
   { WriteToNtuple *p; p=(WriteToNtuple*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SelDictLN_FrameStruct),-1,-1,4,"m_frame=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SelDictLN_TH2),-1,-1,4,"h1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SelDictLN_TFile),-1,-1,4,"nt=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SelDictLN_TTree),-1,-1,4,"t2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SelDictLN_TBranch),-1,-1,4,"b2=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SelDictLN_TString),-1,-1,4,"m_MPXDataSetNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SelDictLN_TString),-1,-1,4,"m_ntupleFileName=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_detID=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SelDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FrameContainer */
static void G__setup_memvarFrameContainer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SelDictLN_FrameContainer));
   { FrameContainer *p; p=(FrameContainer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SelDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR),G__defined_typename("map<int,int>"),-1,4,"m_frameXC=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SelDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR),G__defined_typename("map<int,int>"),-1,4,"m_lvl1=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SelDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR),G__defined_typename("map<int,int>"),-1,4,"m_frameXC_TruthE=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SelDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR),G__defined_typename("map<int,int>"),-1,4,"m_frameXC_E=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nEntriesPad=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nHitsInPad=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nChargeInPad=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"m_isMCData=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SelDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AllPixDigitAnimation */
static void G__setup_memvarAllPixDigitAnimation(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SelDictLN_AllPixDigitAnimation));
   { AllPixDigitAnimation *p; p=(AllPixDigitAnimation*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SelDictLN_TGeoManager),-1,-1,4,"Geo=",0,"The geometry manager");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SelDictLN_TFile),-1,-1,4,"f=",0,"The file where the objects are written");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"Ntracks=",0,"The number of tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SelDictLN_TGeoMedium),-1,-1,4,"medium=",0,"the material");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SelDictLN_TGeoVolume),-1,-1,4,"top=",0,"the box");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SelDictLN_TGeoBBox),-1,-1,4,"PixBox=",0,"The pixels");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SelDictLN_TGeoVolume),-1,-1,4,"PixVolume=",0,"the pixels volume");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"trackid=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"nx=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"ny=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"Lz=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"shiftx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"shifty=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"pitchx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"pitchy=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"MyPalette[100]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"emax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"z_hit=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SelDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarSelDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncSimpleHits(void) {
   /* SimpleHits */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SelDictLN_SimpleHits));
   G__memfunc_setup("SimpleHits",1026,G__SelDict_651_0_1, 105, G__get_linked_tagnum(&G__SelDictLN_SimpleHits), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Rewind",617,G__SelDict_651_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SelDict_651_0_3, 85, G__get_linked_tagnum(&G__SelDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SimpleHits::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SelDict_651_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SimpleHits::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SelDict_651_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SimpleHits::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SelDict_651_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SimpleHits::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__SelDict_651_0_7, 85, G__get_linked_tagnum(&G__SelDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__SelDict_651_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__SelDict_651_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SelDict_651_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SelDict_651_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SimpleHits::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SelDict_651_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SimpleHits::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SelDict_651_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SimpleHits::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SelDict_651_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SimpleHits::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SimpleHits", 1026, G__SelDict_651_0_15, (int) ('i'), G__get_linked_tagnum(&G__SelDictLN_SimpleHits), -1, 0, 1, 1, 1, 0, "u 'SimpleHits' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SimpleHits", 1152, G__SelDict_651_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SelDict_651_0_17, (int) ('u'), G__get_linked_tagnum(&G__SelDictLN_SimpleHits), -1, 1, 1, 1, 1, 0, "u 'SimpleHits' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFrameStruct(void) {
   /* FrameStruct */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SelDictLN_FrameStruct));
   G__memfunc_setup("FrameStruct",1136,G__SelDict_666_0_1, 105, G__get_linked_tagnum(&G__SelDictLN_FrameStruct), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillMetaData",1160,G__SelDict_666_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IncreaseId",983,G__SelDict_666_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetId",473,G__SelDict_666_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPrimaryVertex",1678,G__SelDict_666_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z", "pushing back", (void*) NULL, 0);
   G__memfunc_setup("GetDataSet",966,G__SelDict_666_0_6, 117, G__get_linked_tagnum(&G__SelDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFrameId",952,G__SelDict_666_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RewindMetaDataValues",2010,G__SelDict_666_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetnX",498,G__SelDict_666_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetnY",499,G__SelDict_666_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SelDict_666_0_11, 85, G__get_linked_tagnum(&G__SelDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FrameStruct::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SelDict_666_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FrameStruct::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SelDict_666_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FrameStruct::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SelDict_666_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FrameStruct::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SelDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SelDict_666_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SelDict_666_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FrameStruct::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SelDict_666_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FrameStruct::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SelDict_666_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FrameStruct::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SelDict_666_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FrameStruct::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FrameStruct", 1136, G__SelDict_666_0_23, (int) ('i'), G__get_linked_tagnum(&G__SelDictLN_FrameStruct), -1, 0, 1, 1, 1, 0, "u 'FrameStruct' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FrameStruct", 1262, G__SelDict_666_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SelDict_666_0_25, (int) ('u'), G__get_linked_tagnum(&G__SelDictLN_FrameStruct), -1, 1, 1, 1, 1, 0, "u 'FrameStruct' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncWriteToNtuple(void) {
   /* WriteToNtuple */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SelDictLN_WriteToNtuple));
   G__memfunc_setup("WriteToNtuple",1350,G__SelDict_667_0_1, 105, G__get_linked_tagnum(&G__SelDictLN_WriteToNtuple), -1, 0, 5, 1, 1, 0, 
"u 'TString' - 0 - - u 'TString' - 0 - - "
"u 'TString' - 0 - - i - 'Int_t' 0 - - "
"u 'TString' - 0 '\"RECREATE\"' om", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillVars",835,G__SelDict_667_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FramesHandler' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("closeNtuple",1166,G__SelDict_667_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNtupleFileName",1689,G__SelDict_667_0_4, 117, G__get_linked_tagnum(&G__SelDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInstance",1109,G__SelDict_667_0_5, 85, G__get_linked_tagnum(&G__SelDictLN_WriteToNtuple), -1, 0, 6, 3, 1, 0, 
"u 'TString' - 0 - - u 'TString' - 0 - - "
"u 'TString' - 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - u 'TString' - 0 '\"RECREATE\"' openmode", (char*)NULL, (void*) G__func2void( (WriteToNtuple* (*)(TString, TString, TString, Int_t, Int_t, TString))(&WriteToNtuple::GetInstance) ), 0);
   G__memfunc_setup("GetTree",688,G__SelDict_667_0_6, 85, G__get_linked_tagnum(&G__SelDictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorId",1287,G__SelDict_667_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SelDict_667_0_8, 85, G__get_linked_tagnum(&G__SelDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&WriteToNtuple::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SelDict_667_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WriteToNtuple::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SelDict_667_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&WriteToNtuple::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SelDict_667_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&WriteToNtuple::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__SelDict_667_0_12, 85, G__get_linked_tagnum(&G__SelDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__SelDict_667_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__SelDict_667_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SelDict_667_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SelDict_667_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WriteToNtuple::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SelDict_667_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&WriteToNtuple::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SelDict_667_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WriteToNtuple::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SelDict_667_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&WriteToNtuple::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("WriteToNtuple", 1350, G__SelDict_667_0_20, (int) ('i'), G__get_linked_tagnum(&G__SelDictLN_WriteToNtuple), -1, 0, 1, 1, 1, 0, "u 'WriteToNtuple' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~WriteToNtuple", 1476, G__SelDict_667_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SelDict_667_0_22, (int) ('u'), G__get_linked_tagnum(&G__SelDictLN_WriteToNtuple), -1, 1, 1, 1, 1, 0, "u 'WriteToNtuple' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFrameContainer(void) {
   /* FrameContainer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SelDictLN_FrameContainer));
   G__memfunc_setup("FrameContainer",1422,G__SelDict_668_0_1, 105, G__get_linked_tagnum(&G__SelDictLN_FrameContainer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillOneElement",1395,G__SelDict_668_0_2, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillOneElement",1395,G__SelDict_668_0_3, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLVL1",587,G__SelDict_668_0_4, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetCountersPad",1643,G__SelDict_668_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CleanUpMatrix",1309,G__SelDict_668_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFrameAsMCData",1493,G__SelDict_668_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntriesPad",1295,G__SelDict_668_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitsInPad",1156,G__SelDict_668_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChargeInPad",1334,G__SelDict_668_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SelDict_668_0_11, 85, G__get_linked_tagnum(&G__SelDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FrameContainer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SelDict_668_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FrameContainer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SelDict_668_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FrameContainer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SelDict_668_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FrameContainer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__SelDict_668_0_15, 85, G__get_linked_tagnum(&G__SelDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__SelDict_668_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__SelDict_668_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SelDict_668_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SelDict_668_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FrameContainer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SelDict_668_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FrameContainer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SelDict_668_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FrameContainer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SelDict_668_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FrameContainer::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FrameContainer", 1422, G__SelDict_668_0_23, (int) ('i'), G__get_linked_tagnum(&G__SelDictLN_FrameContainer), -1, 0, 1, 1, 1, 0, "u 'FrameContainer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FrameContainer", 1548, G__SelDict_668_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SelDict_668_0_25, (int) ('u'), G__get_linked_tagnum(&G__SelDictLN_FrameContainer), -1, 1, 1, 1, 1, 0, "u 'FrameContainer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAllPixDigitAnimation(void) {
   /* AllPixDigitAnimation */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SelDictLN_AllPixDigitAnimation));
   G__memfunc_setup("AllPixDigitAnimation",2011,G__SelDict_764_0_1, 105, G__get_linked_tagnum(&G__SelDictLN_AllPixDigitAnimation), -1, 0, 7, 1, 1, 0, 
"i - - 0 - nx i - - 0 - ny "
"d - - 0 - lz d - - 0 - pitchx "
"d - - 0 - pitchy i - - 0 - nHits "
"i - - 0 - eventid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrack",766,G__SelDict_764_0_2, 121, -1, -1, 0, 6, 1, 1, 0, 
"u 'vector<double,allocator<double> >' 'vector<double>' 0 - x u 'vector<double,allocator<double> >' 'vector<double>' 0 - y "
"u 'vector<double,allocator<double> >' 'vector<double>' 0 - z u 'vector<double,allocator<double> >' 'vector<double>' 0 - t "
"d - - 0 - sigma d - - 0 - energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("modulo",656,G__SelDict_764_0_3, 100, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - a d - - 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FirePixel",904,G__SelDict_764_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - i i - - 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SubThresholdPixel",1753,G__SelDict_764_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - i i - - 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetShift",810,G__SelDict_764_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - x d - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SelDict_764_0_7, 85, G__get_linked_tagnum(&G__SelDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AllPixDigitAnimation::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SelDict_764_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AllPixDigitAnimation::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SelDict_764_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AllPixDigitAnimation::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SelDict_764_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AllPixDigitAnimation::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SelDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SelDict_764_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SelDict_764_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AllPixDigitAnimation::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SelDict_764_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AllPixDigitAnimation::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SelDict_764_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AllPixDigitAnimation::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SelDict_764_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AllPixDigitAnimation::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AllPixDigitAnimation", 2011, G__SelDict_764_0_19, (int) ('i'), G__get_linked_tagnum(&G__SelDictLN_AllPixDigitAnimation), -1, 0, 1, 1, 1, 0, "u 'AllPixDigitAnimation' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AllPixDigitAnimation", 2137, G__SelDict_764_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SelDict_764_0_21, (int) ('u'), G__get_linked_tagnum(&G__SelDictLN_AllPixDigitAnimation), -1, 1, 1, 1, 1, 0, "u 'AllPixDigitAnimation' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncSelDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalSelDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcSelDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__SelDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__SelDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__SelDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__SelDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__SelDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SelDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__SelDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SelDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__SelDictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TBranch = { "TBranch" , 99 , -1 };
G__linked_taginfo G__SelDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR = { "map<int,int,less<int>,allocator<pair<const int,int> > >" , 99 , -1 };
G__linked_taginfo G__SelDictLN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR = { "map<long,int,less<long>,allocator<pair<const long,int> > >" , 99 , -1 };
G__linked_taginfo G__SelDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TH2 = { "TH2" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__SelDictLN_SimpleHits = { "SimpleHits" , 99 , -1 };
G__linked_taginfo G__SelDictLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__SelDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SelDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR = { "vector<TVector3,allocator<TVector3> >" , 99 , -1 };
G__linked_taginfo G__SelDictLN_reverse_iteratorlEvectorlETVector3cOallocatorlETVector3gRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVector3,allocator<TVector3> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SelDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__SelDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SelDictLN_FramesHandler = { "FramesHandler" , 99 , -1 };
G__linked_taginfo G__SelDictLN_FrameStruct = { "FrameStruct" , 99 , -1 };
G__linked_taginfo G__SelDictLN_WriteToNtuple = { "WriteToNtuple" , 99 , -1 };
G__linked_taginfo G__SelDictLN_FrameContainer = { "FrameContainer" , 99 , -1 };
G__linked_taginfo G__SelDictLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR = { "map<int,TGeoElementRN*,less<int>,allocator<pair<const int,TGeoElementRN*> > >" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TGeoMedium = { "TGeoMedium" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TGeoBBox = { "TGeoBBox" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TGeoVolume = { "TGeoVolume" , 99 , -1 };
G__linked_taginfo G__SelDictLN_TGeoManager = { "TGeoManager" , 99 , -1 };
G__linked_taginfo G__SelDictLN_vectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgR = { "vector<TGeoVolumeAssembly::ThreadData_t*,allocator<TGeoVolumeAssembly::ThreadData_t*> >" , 99 , -1 };
G__linked_taginfo G__SelDictLN_reverse_iteratorlEvectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TGeoVolumeAssembly::ThreadData_t*,allocator<TGeoVolumeAssembly::ThreadData_t*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SelDictLN_maplElongcOTGeoNavigatorArraymUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOTGeoNavigatorArraymUgRsPgRsPgR = { "map<long,TGeoNavigatorArray*,less<long>,allocator<pair<const long,TGeoNavigatorArray*> > >" , 99 , -1 };
G__linked_taginfo G__SelDictLN_AllPixDigitAnimation = { "AllPixDigitAnimation" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableSelDict() {
  G__SelDictLN_TClass.tagnum = -1 ;
  G__SelDictLN_TBuffer.tagnum = -1 ;
  G__SelDictLN_TMemberInspector.tagnum = -1 ;
  G__SelDictLN_TObject.tagnum = -1 ;
  G__SelDictLN_TString.tagnum = -1 ;
  G__SelDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__SelDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__SelDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__SelDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SelDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__SelDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SelDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__SelDictLN_TFile.tagnum = -1 ;
  G__SelDictLN_TTree.tagnum = -1 ;
  G__SelDictLN_TBranch.tagnum = -1 ;
  G__SelDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__SelDictLN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR.tagnum = -1 ;
  G__SelDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__SelDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__SelDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__SelDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__SelDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__SelDictLN_TH2.tagnum = -1 ;
  G__SelDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__SelDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__SelDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__SelDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__SelDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__SelDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__SelDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__SelDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__SelDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__SelDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__SelDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__SelDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__SelDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__SelDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__SelDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__SelDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__SelDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__SelDictLN_SimpleHits.tagnum = -1 ;
  G__SelDictLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__SelDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SelDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR.tagnum = -1 ;
  G__SelDictLN_reverse_iteratorlEvectorlETVector3cOallocatorlETVector3gRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SelDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__SelDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SelDictLN_FramesHandler.tagnum = -1 ;
  G__SelDictLN_FrameStruct.tagnum = -1 ;
  G__SelDictLN_WriteToNtuple.tagnum = -1 ;
  G__SelDictLN_FrameContainer.tagnum = -1 ;
  G__SelDictLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR.tagnum = -1 ;
  G__SelDictLN_TGeoMedium.tagnum = -1 ;
  G__SelDictLN_TGeoBBox.tagnum = -1 ;
  G__SelDictLN_TGeoVolume.tagnum = -1 ;
  G__SelDictLN_TGeoManager.tagnum = -1 ;
  G__SelDictLN_vectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgR.tagnum = -1 ;
  G__SelDictLN_reverse_iteratorlEvectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SelDictLN_maplElongcOTGeoNavigatorArraymUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOTGeoNavigatorArraymUgRsPgRsPgR.tagnum = -1 ;
  G__SelDictLN_AllPixDigitAnimation.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableSelDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__SelDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TString);
   G__get_linked_tagnum_fwd(&G__SelDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TFile);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TTree);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TBranch);
   G__get_linked_tagnum_fwd(&G__SelDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TH2);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TMatrixTSparseDiaglEfloatgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SelDictLN_SimpleHits),sizeof(SimpleHits),-1,1280,(char*)NULL,G__setup_memvarSimpleHits,G__setup_memfuncSimpleHits);
   G__get_linked_tagnum_fwd(&G__SelDictLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_reverse_iteratorlEvectorlETVector3cOallocatorlETVector3gRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_FramesHandler);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SelDictLN_FrameStruct),sizeof(FrameStruct),-1,295936,(char*)NULL,G__setup_memvarFrameStruct,G__setup_memfuncFrameStruct);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SelDictLN_WriteToNtuple),sizeof(WriteToNtuple),-1,295936,(char*)NULL,G__setup_memvarWriteToNtuple,G__setup_memfuncWriteToNtuple);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SelDictLN_FrameContainer),sizeof(FrameContainer),-1,263424,(char*)NULL,G__setup_memvarFrameContainer,G__setup_memfuncFrameContainer);
   G__get_linked_tagnum_fwd(&G__SelDictLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TGeoMedium);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TGeoBBox);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TGeoVolume);
   G__get_linked_tagnum_fwd(&G__SelDictLN_TGeoManager);
   G__get_linked_tagnum_fwd(&G__SelDictLN_vectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_reverse_iteratorlEvectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SelDictLN_maplElongcOTGeoNavigatorArraymUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOTGeoNavigatorArraymUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SelDictLN_AllPixDigitAnimation),sizeof(AllPixDigitAnimation),-1,324608,"A geometry and event track visualization class",G__setup_memvarAllPixDigitAnimation,G__setup_memfuncAllPixDigitAnimation);
}
extern "C" void G__cpp_setupSelDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupSelDict()");
  G__set_cpp_environmentSelDict();
  G__cpp_setup_tagtableSelDict();

  G__cpp_setup_inheritanceSelDict();

  G__cpp_setup_typetableSelDict();

  G__cpp_setup_memvarSelDict();

  G__cpp_setup_memfuncSelDict();
  G__cpp_setup_globalSelDict();
  G__cpp_setup_funcSelDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncSelDict();
  return;
}
class G__cpp_setup_initSelDict {
  public:
    G__cpp_setup_initSelDict() { G__add_setup_func("SelDict",(G__incsetup)(&G__cpp_setupSelDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initSelDict() { G__remove_setup_func("SelDict"); }
};
G__cpp_setup_initSelDict G__cpp_setup_initializerSelDict;

